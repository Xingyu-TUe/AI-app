<head>
    <meta charset="UTF-8">
    <title>羽毛球双打排阵系统</title>
    <style>
        /* 全局样式 */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f7;
            color: #1d1d1f;
        }

        h1 {
            font-size: 32px;
            font-weight: 600;
            text-align: center;
            margin: 40px 0;
        }

        h3 {
            font-size: 24px;
            font-weight: 500;
            margin: 30px 0 20px;
        }

        /* 输入框样式 */
        input[type="text"],
        input[type="number"] {
            padding: 12px 16px;
            border-radius: 10px;
            border: 1px solid #d2d2d7;
            font-size: 16px;
            width: 200px;
            transition: all 0.3s;
            background-color: white;
        }

        input[type="text"]:focus,
        input[type="number"]:focus {
            outline: none;
            border-color: #0071e3;
            box-shadow: 0 0 0 3px rgba(0,113,227,0.3);
        }

        /* 按钮样式 */
        button {
            background-color: #0071e3;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            margin: 0 10px;
        }

        button:hover {
            background-color: #0077ED;
            transform: scale(1.02);
        }

        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        /* 球员列表样式 */
        #playerList {
            list-style: none;
            padding: 0;
        }

        #playerList li {
            background-color: white;
            padding: 15px 20px;
            margin: 10px 0;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* 比赛卡片样式 */
        .match-card {
            background-color: white;
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .match-card p {
            margin: 10px 0;
            font-size: 16px;
        }

        /* 表格样式 */
        table {
            width: 100%;
            background-color: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        th, td {
            padding: 15px 20px;
            text-align: left;
            border-bottom: 1px solid #d2d2d7;
        }

        th {
            background-color: #f5f5f7;
            font-weight: 500;
        }

        /* 容器样式 */
        div {
            margin: 20px 0;
            padding: 20px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        /* 已记录比分的输入框样式 */
        input[type="number"]:disabled {
            background-color: #f5f5f7;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <h1>羽毛球双打排阵系统</h1>
    
    <div>
        <h3>添加球员</h3>
        <input type="text" id="playerName" placeholder="输入球员姓名">
        <button onclick="addPlayer()">添加球员</button>
        <button onclick="generateMatches()">生成对阵</button>
    </div>

    <div>
        <h3>球员列表</h3>
        <ul id="playerList"></ul>
    </div>

    <div id="matchesContainer">
        <h3>对阵列表</h3>
        <div id="matches"></div>
    </div>

    <div>
        <h3>最终排名</h3>
        <table id="rankings">
            <tr>
                <th>球员</th>
                <th>胜场</th>
                <th>败场</th>
                <th>净胜小分</th>
            </tr>
        </table>
    </div>

    <script>
        let players = [];
        let matches = [];
        let playerStats = {};
        let partnerships = new Set(); // 记录已经配对过的搭档组合

        function addPlayer() {
            const name = document.getElementById('playerName').value.trim();
            if (name && !players.includes(name) && players.length < 8) {
                players.push(name);
                playerStats[name] = {wins: 0, losses: 0, points: 0};
                updatePlayerList();
                document.getElementById('playerName').value = '';
            }
        }

        function updatePlayerList() {
            const list = document.getElementById('playerList');
            list.innerHTML = '';
            players.forEach(player => {
                const li = document.createElement('li');
                li.textContent = player;
                list.appendChild(li);
            });
        }

        // 检查两个球员是否已经搭档过
        function havePartnered(player1, player2) {
            const partnership = [player1, player2].sort().join(',');
            return partnerships.has(partnership);
        }

        // 记录搭档组合
        function recordPartnership(player1, player2) {
            const partnership = [player1, player2].sort().join(',');
            partnerships.add(partnership);
        }

        function generateMatches() {
            if (players.length < 4) {
                alert('至少需要4名球员！');
                return;
            }

            matches = [];
            partnerships.clear(); // 清空搭档记录

            // 生成所有可能的四人组合
            for (let i = 0; i < players.length; i++) {
                for (let j = i + 1; j < players.length; j++) {
                    for (let k = j + 1; k < players.length; k++) {
                        for (let l = k + 1; l < players.length; l++) {
                            // 尝试不同的搭档组合方式
                            const possiblePairings = [
                                [[players[i], players[j]], [players[k], players[l]]],
                                [[players[i], players[k]], [players[j], players[l]]],
                                [[players[i], players[l]], [players[j], players[k]]]
                            ];

                            // 随机打乱可能的搭档组合
                            for (let m = possiblePairings.length - 1; m > 0; m--) {
                                const n = Math.floor(Math.random() * (m + 1));
                                [possiblePairings[m], possiblePairings[n]] = [possiblePairings[n], possiblePairings[m]];
                            }

                            // 选择第一个有效的搭档组合
                            for (const pairing of possiblePairings) {
                                if (!havePartnered(pairing[0][0], pairing[0][1]) && 
                                    !havePartnered(pairing[1][0], pairing[1][1])) {
                                    recordPartnership(pairing[0][0], pairing[0][1]);
                                    recordPartnership(pairing[1][0], pairing[1][1]);
                                    matches.push({
                                        team1: pairing[0],
                                        team2: pairing[1],
                                        score1: 0,
                                        score2: 0,
                                        isScoreRecorded: false
                                    });
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            // 随机打乱比赛顺序
            for (let i = matches.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [matches[i], matches[j]] = [matches[j], matches[i]];
            }

            displayMatches();
        }

        function displayMatches() {
            const container = document.getElementById('matches');
            container.innerHTML = '';

            matches.forEach((match, index) => {
                const div = document.createElement('div');
                div.className = 'match-card';
                div.innerHTML = `
                    <p>比赛 ${index + 1}</p>
                    <p>${match.team1[0]}/${match.team1[1]} VS ${match.team2[0]}/${match.team2[1]}</p>
                    <input type="number" id="score1_${index}" placeholder="队伍1得分" ${match.isScoreRecorded ? 'disabled' : ''} value="${match.score1 || ''}">
                    <input type="number" id="score2_${index}" placeholder="队伍2得分" ${match.isScoreRecorded ? 'disabled' : ''} value="${match.score2 || ''}">
                    <button id="recordBtn_${index}" onclick="recordScore(${index})" ${match.isScoreRecorded ? 'disabled' : ''}>
                        ${match.isScoreRecorded ? '已记录' : '记录比分'}
                    </button>
                `;
                container.appendChild(div);
            });
        }

        function recordScore(matchIndex) {
            const score1 = parseInt(document.getElementById(`score1_${matchIndex}`).value);
            const score2 = parseInt(document.getElementById(`score2_${matchIndex}`).value);
            
            if (isNaN(score1) || isNaN(score2)) {
                alert('请输入有效的比分！');
                return;
            }

            const match = matches[matchIndex];
            match.score1 = score1;
            match.score2 = score2;
            match.isScoreRecorded = true;

            // 禁用输入框和按钮
            document.getElementById(`score1_${matchIndex}`).disabled = true;
            document.getElementById(`score2_${matchIndex}`).disabled = true;
            const recordBtn = document.getElementById(`recordBtn_${matchIndex}`);
            recordBtn.disabled = true;
            recordBtn.textContent = '已记录';

            if (score1 > score2) {
                match.team1.forEach(player => {
                    playerStats[player].wins++;
                    playerStats[player].points += (score1 - score2);
                });
                match.team2.forEach(player => {
                    playerStats[player].losses++;
                    playerStats[player].points += (score2 - score1);
                });
            } else {
                match.team2.forEach(player => {
                    playerStats[player].wins++;
                    playerStats[player].points += (score2 - score1);
                });
                match.team1.forEach(player => {
                    playerStats[player].losses++;
                    playerStats[player].points += (score1 - score2);
                });
            }

            updateRankings();
        }

        function updateRankings() {
            const table = document.getElementById('rankings');
            table.innerHTML = `
                <tr>
                    <th>球员</th>
                    <th>胜场</th>
                    <th>败场</th>
                    <th>净胜小分</th>
                </tr>
            `;

            const sortedPlayers = [...players].sort((a, b) => {
                if (playerStats[b].wins !== playerStats[a].wins) {
                    return playerStats[b].wins - playerStats[a].wins;
                }
                return playerStats[b].points - playerStats[a].points;
            });

            sortedPlayers.forEach(player => {
                const stats = playerStats[player];
                const row = table.insertRow();
                row.insertCell().textContent = player;
                row.insertCell().textContent = stats.wins;
                row.insertCell().textContent = stats.losses;
                row.insertCell().textContent = stats.points;
            });
        }
    </script>
</body>
</html>
